plugins {
    id 'multiloader-loader'
    id 'fabric-loom' version '1.7-SNAPSHOT'
    id 'me.modmuss50.mod-publish-plugin' version "${modmuss50_mod_publish_version}"
}

repositories {
    mavenCentral()
    maven { url 'https://libs.azuredoom.com:4443/mods' }
    maven { url 'https://api.modrinth.com/maven' }
    maven { url "https://cfa2.cursemaven.com" }
    maven { url "https://plugins.gradle.org/m2/" }
    maven { url "https://maven.terraformersmc.com/" }
    maven { url "https://maven.terraformersmc.com/releases" } // modmenu
    maven { url 'https://maven.kosmx.dev/' }
    maven { url 'https://jitpack.io' }
    maven { url "https://maven.shedaniel.me" }
    maven { url "https://jm.gserv.me/repository/maven-public/" }
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-1.20.6:2024.05.01@zip")
    }
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"
    modImplementation "mod.azure.azurelib:azurelib-fabric-${minecraft_version}:${azurelib_version}"
    modApi "com.terraformersmc:modmenu:${modmenu_version}"
    modCompileOnly "me.shedaniel:RoughlyEnoughItems-api-fabric:${project.rei_version}"
    modRuntimeOnly "me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}"
    modApi "dev.architectury:architectury-fabric:${project.arch_version}"
    modApi "me.shedaniel.cloth:cloth-config-fabric:${project.cloth_version}"
    modImplementation 'mysticdrew:common-networking-fabric:1.0.10-1.21'
}

loom {
    def aw = project(":common").file("src/main/resources/${mod_id}.accesswidener")
    if (aw.exists()) {
        accessWidenerPath.set(aw)
    }
    mixin {
        defaultRefmapName.set("${mod_id}.refmap.json")
    }
    runs {
        client {
            client()
            setConfigName("Fabric Client")
            ideConfigGenerated(true)
            runDir("runs/client")
        }
        server {
            server()
            setConfigName("Fabric Server")
            ideConfigGenerated(true)
            runDir("runs/server")
        }
    }
}

if (file('key.properties').exists()) {
    publishMods {
        def releaseProp = new Properties()
        File secretPropsFile = file("key.properties")
        releaseProp.load(secretPropsFile.newInputStream())
        file = remapJar.archiveFile
        changelog = rootProject.file("changelog.md").text
        type = STABLE
        modLoaders.add("fabric")

        curseforge {
            projectId = project.curseforgeID
            projectSlug = project.projectSlug
            accessToken = releaseProp.getProperty("curseKey")
            minecraftVersions.add("${minecraft_version}")
            requires {
                slug = "fabric-api"
            }
            requires {
                slug = "azurelib"
            }
            requires {
                slug = "common-network"
            }
        }
        modrinth {
            projectId = project.modrinthID
            accessToken = releaseProp.getProperty('modrinthKey')
            minecraftVersions.add("${minecraft_version}")
            requires {
                slug = "fabric-api"
            }
            requires {
                slug = "azurelib"
            }
            requires {
                slug = "common-network"
            }
        }
    }
}